AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Creates required AWS resources for Heatmeter data capture through AWS IOT Core.
Parameters:
  HeatermeterThingID:
    Type: String
    Description: Heatermeter Thing ID (MAC Address)
    Default:  79A6083123EE
  CertificateARN:
    Type: String
    Description: The Amazon Resource Name (ARN) of the existing AWS IoT certificate.
  S3BucketARNRawEvents:
    Type: String
    Description: The Amazon Resource Name (ARN) for the S3 Bucket to store your raw events.

Resources:
  IoTThing:
    Type: 'AWS::IoT::Thing'
    Properties:
      ThingName: !Sub ${HeatermeterThingID}-${AWS::StackName}

  IoTPolicy:
    Type: 'AWS::IoT::Policy'
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: 
            - 'iot:Publish'
            - 'iot:Receive'
            Effect: Allow
            Resource: !Sub 'arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topic/heatermeter*'
          - Action: 'iot:Subscribe'
            Effect: Allow
            Resource: !Sub 'arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topicfilter/heatermeter*'
          - Action: 'iot:Connect'
            Effect: Allow
            Resource: !Sub 'arn:aws:iot:${AWS::Region}:${AWS::AccountId}:client/heatermeter'
 
  IoTRole:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: iot.amazonaws.com
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSIoTRuleActions
      RoleName: !Sub HeatermeterActionRole-${AWS::StackName}

  KDFHRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: firehose.amazonaws.com
            Action: 'sts:AssumeRole'
            Condition:
              StringEquals:
                'sts:ExternalId': !Ref 'AWS::AccountId'      
  KDFHPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: firehose_Delivery_policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: "*"
            Resource: "*"
      Roles:
        - !Ref KDFHRole                

  IoTPolicyPrincipalAttachment:
    Type: 'AWS::IoT::PolicyPrincipalAttachment'
    Properties:
      PolicyName: !Ref IoTPolicy
      Principal: !Ref CertificateARN
 
  IoTThingPrincipalAttachment:
    Type: 'AWS::IoT::ThingPrincipalAttachment'
    Properties:
      Principal: !Ref CertificateARN
      ThingName: !Ref IoTThing

  TopicRuleTemps:
    Type: 'AWS::IoT::TopicRule'
    Properties:
      RuleName: !Sub '${HeatermeterThingID}_temps'
      TopicRulePayload:
        Actions:
          - Republish:
              RoleArn: !GetAtt IoTRole.Arn
              Topic: !Sub 'heatermeter/${HeatermeterThingID}/temps'
        AwsIotSqlVersion: 2016-03-23
        RuleDisabled: false
        Sql: !Sub SELECT time, temps FROM 'heatermeter/${HeatermeterThingID}'

  TopicRuleTempProbe1:
    Type: 'AWS::IoT::TopicRule'
    Properties:
      RuleName: !Sub '${HeatermeterThingID}_temp_probe_1'
      TopicRulePayload:
        Actions:
          - Republish:
              RoleArn: !GetAtt IoTRole.Arn
              Topic: !Sub 'heatermeter/${HeatermeterThingID}/temps/probe1'
        AwsIotSqlVersion: 2016-03-23
        RuleDisabled: false
        Sql: !Sub SELECT (SELECT c FROM temps WHERE n = 'Probe 1') as probe_1 FROM 'heatermeter/${HeatermeterThingID}'
        
#  Working https://docs.aws.amazon.com/iot/latest/developerguide/iot-rules.html
# SELECT (SELECT c FROM temps WHERE n = 'Probe 1') as probe_1 FROM 'heatermeter/${HeatermeterThingID}'
# SELECT get((SELECT c FROM temps WHERE n = 'Probe 1'),c).c as probe_1 FROM 'heatermeter/${HeatermeterThingID}'
# SELECT get((SELECT v FROM e WHERE n = 'temperature'),1).v as temperature FROM 'topic'


  TopicRuleSetTemp:
    Type: 'AWS::IoT::TopicRule'
    Properties:
      RuleName: !Sub '${HeatermeterThingID}_settemp'
      TopicRulePayload:
        Actions:
          - Republish:
              RoleArn: !GetAtt IoTRole.Arn
              Topic: !Sub 'heatermeter/${HeatermeterThingID}/settemp'
        AwsIotSqlVersion: 2016-03-23
        RuleDisabled: false
        Sql: !Sub SELECT time, set FROM 'heatermeter/${HeatermeterThingID}'        

  TopicRuleAll:
    Type: 'AWS::IoT::TopicRule'
    Properties:
      RuleName: !Sub '${HeatermeterThingID}_all'
      TopicRulePayload:
        Actions:
          - Firehose:
              DeliveryStreamName: !Ref DeliverystreamSentimentFirehose
              RoleArn: !GetAtt IoTRole.Arn
          - Lambda:
              FunctionArn: !GetAtt LambdaHeatermeterProcessEvents.Arn              
        AwsIotSqlVersion: 2016-03-23
        RuleDisabled: false
        Sql: !Sub SELECT * FROM 'heatermeter/${HeatermeterThingID}'        

  DeliverystreamSentimentFirehose:
    Type: 'AWS::KinesisFirehose::DeliveryStream'
    Properties:
      DeliveryStreamName: !Sub 'heatermeter-all-events-raw-${AWS::StackName}'
      ExtendedS3DestinationConfiguration:
        BucketARN: !Ref S3BucketARNRawEvents
        BufferingHints:
          IntervalInSeconds: '60'
          SizeInMBs: '1'
        CompressionFormat: UNCOMPRESSED
        Prefix: !Sub ${HeatermeterThingID}/raw/
        RoleARN: !GetAtt KDFHRole.Arn
  
  ProbeTempsTableDynamoDB:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions: 
          - 
            AttributeName: "ProbeName"
            AttributeType: "S"
          - 
            AttributeName: "DateHour"
            AttributeType: "S"
        KeySchema: 
          - 
            AttributeName: "ProbeName"
            KeyType: "HASH"
          - 
            AttributeName: "DateHour"
            KeyType: "RANGE"
        ProvisionedThroughput: 
          ReadCapacityUnits: "5"
          WriteCapacityUnits: "5"
        TableName: !Sub heatermeter-probe-temps-${AWS::StackName}
        Tags: 
        - Key: App
          Value: Heatermeter
        TimeToLiveSpecification:
          AttributeName: ExpirationTime
          Enabled: True

  WriteCapacityScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 15
      MinCapacity: 5
      ResourceId: !Join
        - /
        - - table
          - !Ref ProbeTempsTableDynamoDB
      RoleARN: !GetAtt ScalingRole.Arn
      ScalableDimension: dynamodb:table:WriteCapacityUnits
      ServiceNamespace: dynamodb

  ScalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - application-autoscaling.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: "root"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "dynamodb:DescribeTable"
                  - "dynamodb:UpdateTable"
                  - "cloudwatch:PutMetricAlarm"
                  - "cloudwatch:DescribeAlarms"
                  - "cloudwatch:GetMetricStatistics"
                  - "cloudwatch:SetAlarmState"
                  - "cloudwatch:DeleteAlarms"
                Resource: "*"

  WriteScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: WriteAutoScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref WriteCapacityScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 50.0
        ScaleInCooldown: 60
        ScaleOutCooldown: 60
        PredefinedMetricSpecification:
          PredefinedMetricType: DynamoDBWriteCapacityUtilization

  LambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Policies:
        -
          PolicyName: "AdminAccess"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action: "*"
                Resource: "*"

  LambdaInvocationPermission:
    Type: AWS::Lambda::Permission
    Properties:
      SourceArn: !Join [ "", [ "arn:aws:iot:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ":rule/", !Ref "TopicRuleAll" ] ]
      Action: lambda:InvokeFunction
      Principal: iot.amazonaws.com
      FunctionName: !GetAtt LambdaHeatermeterProcessEvents.Arn
      SourceAccount: !Ref AWS::AccountId

  LambdaHeatermeterProcessEvents:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: !Sub Heatermeter-processProbeEvents-${AWS::StackName}
      Description: Task to process heatermeter evetns
      Handler: "index.lambda_handler"
      Role: !GetAtt [ LambdaExecutionRole, Arn ]
      Code:
        ZipFile: |
                  import boto3
                  import json
                  import os
                  import time, datetime

                  # Helper class to convert a DynamoDB item to JSON. [https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/GettingStarted.Python.03.html#GettingStarted.Python.03.01]
                  class DecimalEncoder(json.JSONEncoder):
                      def default(self, o):
                          if isinstance(o, decimal.Decimal):
                              if abs(o) % 1 > 0:
                                  return float(o)
                              else:
                                  return int(o)
                          return super(DecimalEncoder, self).default(o)

                  def lambda_handler(event, context):
                      # print(event)

                      dynamodb = boto3.client('dynamodb')

                      #Convert Epoch Time
                      eventTime = time.strftime('%Y-%m-%dT%H:%M:%S', time.localtime(event['time']))
                      ttlExpirationDays = int(os.environ['ttlExpirationDays'])
                      expirationTime = (datetime.datetime.fromtimestamp(event['time']) + datetime.timedelta(days=ttlExpirationDays)).strftime('%s')

                      for temp in event['temps']:
                          probeName = temp['n']
                      
                          probeTemp = temp['c']
                          if probeTemp == None:
                              print('!!! %s Not Connected.  Setting temp to 0.' % probeName)
                              probeTemp = 0
                          
                          print(probeName, probeTemp)
                          
                          
                          response = dynamodb.put_item(
                              TableName=os.environ['ddbTableName'],
                              Item={
                                  'ProbeName': {
                                      'S': probeName,
                                  },
                                  'DateHour': {
                                      'S': eventTime,
                                  },
                                  'ProbeTemp': {
                                      'S': str(probeTemp),
                                  },
                                  'ExpirationTime': {
                                      'S': expirationTime,
                                  },
                              }
                          )
                          print("PutItem succeeded:")
                          # print(json.dumps(response, indent=4, cls=DecimalEncoder))
      Environment:
        Variables:
          ddbTableName: !Ref ProbeTempsTableDynamoDB
          ttlExpirationDays: 7
      Runtime: "python2.7"
      Timeout: "25"                